generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
}

model Asset {
    id Int @id @default(autoincrement())
    type String
    name String
    path String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId Int
    user User @relation(fields: [userId], references: [id])

    directoryId Int?
    directory Directory? @relation(fields: [directoryId], references: [id])

    @@map("assets")
}

model Character {
    id Int @id @default(autoincrement())
    gameId String
    name String
    portrait String?
    data Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId Int
    user User @relation(fields: [userId], references: [id])

    @@map("characters")
}

model Directory {
    id Int @id @default(autoincrement())
    name String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId Int
    user User @relation(fields: [userId], references: [id])

    parentId Int?
    parent Directory? @relation("structure", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    children Directory[] @relation("structure")

    assets Asset[]

    @@map("directories")
}

model Invitation {
    id Int @id @default(autoincrement())
    code String
    expire DateTime
    isUsed Boolean

    @@unique(code)
    @@map("invitations")
}

model Note {
    id Int @id @default(autoincrement())
    position Int
    isShared Boolean @default(false)
    title String
    text String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId Int
    user User @relation(fields: [userId], references: [id])

    sessionId Int
    session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@map("notes")
}

model Session {
    id Int @id @default(autoincrement())
    gameId String
    name String
    sketch Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    masterId Int
    master User @relation(fields: [masterId], references: [id])

    notes Note[]

    @@map("sessions")
}

model Sketch {
    id Int @id @default(autoincrement())
    name String
    sketch Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId Int
    user User @relation(fields: [userId], references: [id])

    @@map("sketchs")
}

model User {
    id Int @id @default(autoincrement())
    name String
    email String
    password String
    theme String
    locale String
    isAdmin Boolean @default(false)
    isEnabled Boolean @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    assets Asset[]
    directories Directory[]
    sessions Session[]
    characters Character[]
    sketchs Sketch[]
    notes Note[]

    @@unique(email)
    @@map("users")
}
