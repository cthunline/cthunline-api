generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url = env("MONGO_URL")
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    email String
    password String
    isAdmin Boolean @default(false)
    isEnabled Boolean @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    assets Asset[]
    directories Directory[]
    sessions Session[]
    characters Character[]
    notes Note[]

    @@unique(email)
    @@map("users")
}

model Asset {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    type String
    name String
    path String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String @db.ObjectId
    user User @relation(fields: [userId], references: [id])

    directoryId String? @db.ObjectId
    directory Directory? @relation(fields: [directoryId], references: [id])

    @@map("assets")
}

model Directory {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String @db.ObjectId
    user User @relation(fields: [userId], references: [id])

    parentId String? @db.ObjectId
    parent Directory? @relation("structure", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children Directory[] @relation("structure")

    assets Asset[]

    @@map("directories")
}

model Session {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    gameId String
    name String
    sketch Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    masterId String @db.ObjectId
    master User @relation(fields: [masterId], references: [id])

    notes Note[]

    @@map("sessions")
}

model Note {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    text String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String @db.ObjectId
    user User @relation(fields: [userId], references: [id])

    sessionId String @db.ObjectId
    session Session @relation(fields: [sessionId], references: [id])

    @@map("notes")
}

model Character {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    gameId String
    name String
    data Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String @db.ObjectId
    user User @relation(fields: [userId], references: [id])

    @@map("characters")
}
